#include "SR_api.h"
#include "sr_tengine_c_api.h"
#include "common.hpp"
#include "common_util.hpp"
#include "node.hpp"
#include <opencv2/opencv.hpp>
#include <memory>

using namespace TEngine;
class SRAPI::Engine{
public:
    Engine(const char* prototxt, const char* caffemodel){
        std::string key(caffemodel);
//        model_name = "model" + key;
          model_name = "model";

        init_tengine_library();
        if (request_tengine_version("0.1") < 0)
            return ;

        if (load_model(model_name.c_str(), "caffe", prototxt, caffemodel) < 0){
            throw "loading model error.\n";
        }
        std::cout << "load model done!\n";


//        std::string graph_name = "graph_"+key;
        std::string graph_name = "graph0";
        graph = create_runtime_graph(graph_name.c_str(), model_name.c_str(), NULL);
        if (!check_graph_valid(graph))
        {
            std::cout << "create graph0 failed\n";
            return;
        }
    }
    graph_t graph;
    std::string model_name;
    ~Engine(){
//        postrun_graph(graph);
//        destroy_runtime_graph(graph);
//        remove_model(model_name.c_str());
    }
};

SRAPI::SRAPI(){
    int error = init_tengine_library();
    if (error) {
        printf("error during init_tengine_library: %d\n", error);
        throw "init_tengine_library error.\n";
    }
}

SRAPI::~SRAPI(){}

void SRAPI::addNetwork(const char* prototxt, const char* caffemodel){

    std::string model_name(caffemodel);
    std::shared_ptr<Engine> engine(new Engine(prototxt, caffemodel));
    engineMap[model_name] = engine;
}

cv::Mat SRAPI::run(const cv::Mat inputImage, int widht, int height, const char* caffemodel){
    std::string key(caffemodel);
    std::shared_ptr<Engine> engine = engineMap[key];
    graph_t graph=engine->graph;
    tensor_t input_tensor = get_graph_input_tensor(/*engineMap[key]->*/graph, 0, 0);
    int in_dim[4]={0};
    get_tensor_shape(input_tensor, in_dim, 4);

    if (!check_tensor_valid(input_tensor)) {
        printf("Get input node failed : node_idx: %d, tensor_idx: %d\n", 0, 0);
        throw "invalid input error";
    }

    void* input_data = (void*)inputImage.data;
    int dims[] = {1, 1, height, widht};
    set_tensor_shape(input_tensor, dims, 4);
    set_tensor_buffer(input_tensor, input_data, 1*widht * height * sizeof(float));
//    if(set_tensor_buffer(input_tensor, input_data, widht * height * sizeof(float))<0)
//    {
//        std::printf("Set buffer for tensor failed\n");
//        exit(0);
//    }

    // prerun
    prerun_graph(/*engineMap[key]->*/graph);

    // output
    tensor_t output_tensor = get_graph_output_tensor(/*engineMap[key]->*/graph, 0,0);
    int out_dim[4] = {0};
    get_tensor_shape(output_tensor, out_dim, 4);

    float * output = (float*)get_tensor_buffer(output_tensor);
    run_graph(graph,1);
    cv::Mat outImage(cv::Size(out_dim[2], out_dim[3]), CV_32FC1);
    memcpy(outImage.data, output, sizeof(float)*out_dim[2]*out_dim[3]);

//    put_graph_tensor(output_tensor);
//    put_graph_tensor(input_tensor);
    return outImage;
}

